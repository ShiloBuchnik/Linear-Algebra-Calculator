This file contains dumped functions which were once used in the code, and were replaced or deleted.
Why do I keep them? idk

// AuxFuncs:

This function takes a matrix and separate a column (listed as 'column') from it.
It returns a pointer to a new matrix without that column, and it stores that column in 'arrColumn'
long double* separateColumn(int numRow, int numColumn, int column, long double* matrix, long double* arrColumn)
{
    if (column < 0 || column >= numColumn) return NULL;

    int i, j, x = 0;
    long double *scalarMatrix = (long double*) malloc(numRow * (numColumn - 1) * sizeof(long double));

    for (i = 0; i < numRow; i++)
    {
        for (j = 0; j < numColumn; j++)
        {
            if (j == column) *(arrColumn + i) = *(matrix + i*numColumn + j);
            else
            {
                *(scalarMatrix + x) = *(matrix + i*numColumn + j);
                x++;
            }
        }
    }

    return scalarMatrix;
}


The function takes a matrix, a column vector and a number 'column'.
it swaps between the column vector and the column in the matrix whose number is stored in 'column'
void switchColumns(int numRow, int numColumn, int column, long double* matrix, long double* arrColumn)
{
    if (column < 0 || column >= numColumn) return;

    for (int i = 0; i < numRow; i++) swap(matrix + i*numColumn + column, arrColumn + i);
}


// CoreFuncs:

/* I ditched this algorithm for solving systems of equations in favor of least squares, which is more comprehensive and time-efficient
This function takes the 'A' and 'b' in Ax=b, and stores the 'x', if there is a solution, in 'solution'
The calculation is done with Cramer's rule
bool CramersRule(int size, long double* scalarMatrix, long double* solution, long double* bColumn)
{
    long double matrixDeter = deterCalc(size, scalarMatrix);

    if (areEqual(matrixDeter, 0.0)) return 0; // No single solution

    for (int i = 0; i < size; i++)
    {
        switchColumns(size, size, i, scalarMatrix, bColumn); // Switching to calculate determinant ('size' represents the b vector in Ax=b)

        *(solution + i) = deterCalc(size, scalarMatrix) / matrixDeter; // The actual formula

        switchColumns(size, size, i, scalarMatrix, bColumn); // Switching back
    }

    return 1; // A single solution found
}

THIS FUNCTION ALLOCATES MEMORY FOR 'pseudo_inverse'
This function returns the pseudo inverse of the 'inputMatrix', *if and only if the columns are independent*, and NULL otherwise
Although a pseudo inverse exists for every matrix, when the columns are independent, there's a simple formula to calculate it;
and in Least Squares it's all we care about

Remember that 'numRow' and 'numColumn' are switched for the pseudo inverse!
static long double* pseudoInverseCalc(int numRow, int numColumn, long double* A)
{
    if (!areColumnsIndependent(numRow, numColumn, A)) return NULL;

    long double* A_T = transpose(numRow, numColumn, A); // A^T
    long double* A_T_A = matrixMultiplier(numColumn, numRow, numColumn, A_T, A); // A^T * A
    long double* A_T_A_inverse = (long double*) malloc(numColumn * numColumn * sizeof(long double)); // (A^T * A)^-1
    setIdentityMatrix(numColumn, A_T_A_inverse);
    gaussJordanAndFindInverse(numColumn, numColumn, A_T_A, A_T_A_inverse, NULL, NULL, NULL, NULL);

    long double* pseudo_inverse = matrixMultiplier(numColumn, numColumn, numRow, A_T_A_inverse, A_T); // (A^T * A)^-1 * A^T

    free(A_T);
    free(A_T_A);
    free(A_T_A_inverse);
    return pseudo_inverse;
}

I ditched the regular method for solving least squares in favor of the QR-oriented one, which is more efficient (but not asymptotically)
THIS FUNCTION ALLOCATES MEMORY FOR 'x' AND 'p_x'
This function solves a system of equations through the least squares algorithm
If there's a *single* minimum point, it stores it in 'x' (note it's a long double pointer), and returns the remainder vector
(When the minimum point is a true solution, the remainder is 0, obviously)
If there's infinite solutions, it returns NULL
long double* leastSquares(int numRow, int numColumn, long double* A, long double** x, long double* b)
{
    long double* pseudo_inverse = pseudoInverseCalc(numRow, numColumn, A);
    if (!pseudo_inverse) return NULL;

    *x = matrixMultiplier(numColumn, numRow, 1, pseudo_inverse, b); // This is the minimal point

    long double* temp = matrixMultiplier(numRow, numColumn, 1, A, *x);
    long double* p_x = vectorSubtraction(numRow, temp, b, 'y'); // This is the function p(x) (the remainder function) at the minimal point

    free(pseudo_inverse);
    free(temp);

    return p_x;
}